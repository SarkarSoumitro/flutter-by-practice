ЁЯФ┤ Freezed ржЫрж╛рзЬрж╛ (ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ JSON рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж▓рзЗ)

ржзрж░рзБржи, ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржПржХржЯрж╛ API рж░рзЗрж╕ржкржирзНрж╕ ржЖржЫрзЗ:

{
  "id": 1,
  "title": "Inception",
  "poster_path": "/abc123.jpg",
  "overview": "A mind-bending thriller."
}


ржПржЦржи ржПржЗ ржбрзЗржЯрж╛ ржзрж░рждрзЗ рж╣рж▓рзЗ ржЖржкржирж╛ржХрзЗ ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ ржПржХржЯрж╛ Dart class рж▓рж┐ржЦрждрзЗ рж╣ржмрзЗ:

class Movie {
  final int id;
  final String title;
  final String? posterPath;
  final String? overview;

  Movie({
    required this.id,
    required this.title,
    this.posterPath,
    this.overview,
  });

  // JSON ржерзЗржХрзЗ ржЕржмржЬрзЗржХрзНржЯ ржмрж╛ржирж╛рждрзЗ
  factory Movie.fromJson(Map<String, dynamic> json) {
    return Movie(
      id: json['id'] as int,
      title: json['title'] as String,
      posterPath: json['poster_path'] as String?,
      overview: json['overview'] as String?,
    );
  }

  // ржЕржмржЬрзЗржХрзНржЯ ржерзЗржХрзЗ JSON ржмрж╛ржирж╛рждрзЗ
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'poster_path': posterPath,
      'overview': overview,
    };
  }
}


ЁЯСЙ ржПржЦрж╛ржирзЗ ржЖржкржирж┐ ржжрзЗржЦрждрзЗ ржкрж╛ржЪрзНржЫрзЗржи:

fromJson ржЖрж░ toJson ржЖржкржирж╛ржХрзЗржЗ рж▓рж┐ржЦрждрзЗ рж╣ржЪрзНржЫрзЗред

ржпржжрж┐ ржлрж┐рж▓рзНржб ржирж╛ржо ржПржХржЯрзБ ржмрзЬ рж╣рзЯ, ржнрзБрж▓ рж╣ржмрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржерж╛ржХрзЗред

рззрзжтАУрззрзлржЯрж╛ ржлрж┐рж▓рзНржб рж╣рж▓рзЗ ржХрзЛржб ржЕржирзЗржХ рж▓ржорзНржмрж╛ рж╣рзЯрзЗ ржпрж╛рзЯред

ржкрж░рзЗ ржпржжрж┐ ржирждрзБржи ржХрзЛржирзЛ ржлрж┐рж▓рзНржб API рждрзЗ ржЖрж╕рзЗ, рждржЦржи ржжрзБржЯрзЛ ржорзЗржержбржЗ ржЖржмрж╛рж░ ржоржбрж┐ржлрж╛ржЗ ржХрж░рждрзЗ рж╣рзЯред

ЁЯЯв Freezed ржжрж┐рзЯрзЗ (Code Generation ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ)

ржПржХржЗ ржХрж╛ржЬ ржЦрзБржм ржЫрзЛржЯ ржХрзЛржбрзЗ ржХрж░рж╛ ржпрж╛рзЯ:

@freezed
class MovieModel with _$MovieModel {
  const factory MovieModel({
    required int id,
    required String title,
    @JsonKey(name: 'poster_path') String? posterPath,
    @JsonKey(name: 'overview') String? overview,
  }) = _MovieModel;

  factory MovieModel.fromJson(Map<String, dynamic> json) =>
      _$MovieModelFromJson(json);
}


ржПржЦрж╛ржирзЗ:

fromJson ржЖрж░ toJson ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ рж▓рж┐ржЦрждрзЗ рж╣ржЪрзНржЫрзЗ ржирж╛ред

Freezed + JsonSerializable ржЕржЯрзЛржорзЗржЯрж┐ржХ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рзЗ ржжрзЗрзЯред

copyWith, ==, hashCode рж╕ржмржЗ ржЕржЯрзЛ ржЬрзЗржирж╛рж░рзЗржЯрзЗржбред

ржХрзЛржб ржЕржирзЗржХ ржЫрзЛржЯ, ржкрзЬрждрзЗржУ рж╕рж╣ржЬред

тЬЕ ржХрзЗржи Freezed ржЫрж╛рзЬрж╛ ржХрж╖рзНржЯржХрж░ рж╣рзЯ?

ржмрж╛рж░ржмрж╛рж░ ржХрзЛржб рж▓рж┐ржЦрждрзЗ рж╣рзЯ (fromJson, toJson, copyWith, hashCode, equality ржЗрждрзНржпрж╛ржжрж┐)ред

ржмрзЬ API рж╣рж▓рзЗ ржнрзБрж▓ ржХрж░рж╛рж░ рж╕рзБржпрзЛржЧ ржмрзЗрж╢рж┐ (field ржирж╛ржо, ржЯрж╛ржЗржк ржЗрждрзНржпрж╛ржжрж┐)ред

ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ ржХрзЛржб рж╣рзЯ тЖТ ржкрзНрж░рждрж┐ржЯрж┐ ржоржбрзЗрж▓рзЗрж░ ржЬржирзНржп ржПржХржЗ boilerplate ржмрж╛рж░ржмрж╛рж░ рж▓рж┐ржЦрждрзЗ рж╣рзЯред

рж░ржХрзНрж╖ржгрж╛ржмрзЗржХрзНрж╖ржг (maintain) ржХрж░рж╛ ржХржарж┐ржи тЖТ API рждрзЗ ржирждрзБржи ржлрж┐рж▓рзНржб ржпрзЛржЧ рж╣рж▓рзЗ ржЖржкржирж╛ржХрзЗ ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ ржкрзНрж░рждрж┐ржЯрж┐ ржЬрж╛рзЯржЧрж╛рзЯ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ рж╣рзЯред

тЬЕ ржХрзЗржи Freezed рж╕рж╣ржЬ?

ржЕржЯрзЛржорзЗржЯрж┐ржХ ржХрзЛржб ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рзЗ (fromJson, toJson, copyWith рж╕ржм)ред

ржХржо ржХрзЛржб, ржХржо ржнрзБрж▓ред

ржЗржорж┐ржЙржЯрзЗржмрж▓ ржбрзЗржЯрж╛ ржоржбрзЗрж▓ ржкрзЗрзЯрзЗ ржпрж╛ржиред

рж╕рзНржЯрзЗржЯ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯрзЗ рж╕рж╣ржЬрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ (Bloc, Riverpod ржЗрждрзНржпрж╛ржжрж┐рждрзЗ)ред
